function foo(a,b){    if (a == 1 && b == 2) {        return true;    } else {        return false;    }}console.log(foo(1,2)); //true console.log(foo(1,"2"));//false console.log(foo(1, "2")); //false  This is due to JavaScript's loose typing.  The '==' operator performs type coercion, meaning it attempts to convert the operands to the same type before comparison. In this case, when comparing 2 and "2",  JavaScript coerces the string "2" to a number 2 and then performs the comparison which is true. When comparing 2 and "2", Javascript does the type coercion and then the comparison which is true. However, if we use the strict equality operator '===', it does not perform type coercion. Therefore, it would return false because the types are different.